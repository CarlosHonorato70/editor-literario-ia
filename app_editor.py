import os
import streamlit as st
from google import genai
from docx import Document
from io import BytesIO
from docx.shared import Inches

# --- 0. Configura√ß√£o e Inicializa√ß√£o ---

st.set_page_config(page_title="Editor Liter√°rio IA", layout="wide")
st.title("üìö Editor Liter√°rio com Gemini AI")
st.subheader("Pr√©-Impress√£o Completa: Conte√∫do, Coer√™ncia e Diagrama√ß√£o.")

# Configura√ß√£o da API
try:
    API_KEY = os.environ.get("GEMINI_API_KEY")
    if not API_KEY and hasattr(st, 'secrets') and 'GEMINI_API_KEY' in st.secrets:
         API_KEY = st.secrets['GEMINI_API_KEY']
    
    if not API_KEY:
        st.error("ERRO: A Chave de API do Gemini n√£o est√° configurada.")
        st.stop()
        
    client = genai.Client(api_key=API_KEY)
except Exception as e:
    st.error(f"Erro na inicializa√ß√£o da API: {e}")
    st.stop()


# --- 1. Fun√ß√£o do Prompt de Edi√ß√£o de Par√°grafo (Mantida) ---

def get_edicao_prompt(texto: str) -> str:
    """Cria o prompt detalhado para edi√ß√£o gramatical e coer√™ncia."""
    # ... (O prompt existente que foca na corre√ß√£o de par√°grafos)
    prompt = f"""
    Voc√™ √© um editor liter√°rio de n√≠vel s√™nior, com foco em fic√ß√£o.
    Sua tarefa √© revisar, editar e aprimorar o par√°grafo a seguir, garantindo que esteja pronto para a publica√ß√£o.
    
    Instru√ß√µes de Edi√ß√£o:
    1. **Revis√£o Gramatical e Ortogr√°fica:** Corrija todos os erros.
    2. **Edi√ß√£o de Estilo (For√ßa Narrativa):** Sugira reescritas para frases fracas, utilizando o princ√≠pio "Mostre, N√£o Diga" e favorecendo a voz ativa.
    3. **Coer√™ncia de Linguagem e Narrativa:** Mantenha um tom consistente. Se identificar nomes, locais ou fatos que claramente contradizem o contexto de um livro, sinalize e corrija.
    
    ATEN√á√ÉO: Retorne *apenas* o par√°grafo revisado, sem coment√°rios, introdu√ß√µes ou explica√ß√µes.
    
    Par√°grafo a ser editado:
    ---
    {texto}
    ---
    """
    return prompt

def revisar_paragrafo(paragrafo_texto: str) -> str:
    # Fun√ß√£o que envia o par√°grafo para a IA
    if not paragrafo_texto.strip(): return "" 
    prompt = get_edicao_prompt(paragrafo_texto)
    try:
        response = client.models.generate_content(model='gemini-2.5-pro', contents=prompt)
        return response.text.strip()
    except Exception as e:
        print(f"[ERRO DE IA] Falha ao processar o par√°grafo: {e}")
        return paragrafo_texto

# --- NOVA FUN√á√ÉO: Gera√ß√£o do Relat√≥rio Estrutural (Editor-Chefe) ---

def gerar_relatorio_estrutural(texto_completo: str) -> str:
    """
    Analisa o texto completo para dar feedback estrutural, de ritmo e de personagem.
    """
    prompt_relatorio = f"""
    Voc√™ √© um Editor-Chefe de uma grande editora. Sua tarefa √© analisar o manuscrito e gerar um breve Relat√≥rio de Revis√£o para o autor, focando em:
    
    1. **Ritmo da Narrativa:** Em quais momentos o ritmo est√° lento (excesso de descri√ß√£o) ou muito acelerado (falta de desenvolvimento).
    2. **Desenvolvimento de Personagens:** A motiva√ß√£o e arco dos personagens principais s√£o claros e consistentes?
    3. **Estrutura Geral:** O in√≠cio e o final (cl√≠max e resolu√ß√£o) s√£o satisfat√≥rios?
    
    Formate o relat√≥rio usando t√≠tulos e bullet points, com no m√°ximo 500 palavras.
    
    MANUSCRITO:
    ---
    {texto_completo[:15000]} 
    ---
    """
    # Limita o texto completo a 15000 caracteres para evitar ultrapassar o limite de tokens, 
    # pois o Gemini-2.5-pro possui limite de 32768 tokens, e o prompt em si j√° √© grande.
    try:
        response = client.models.generate_content(
            model='gemini-2.5-pro',
            contents=prompt_relatorio
        )
        return response.text
    except Exception as e:
        return f"Falha ao gerar o Relat√≥rio Estrutural: {e}"


# --- FUN√á√ÉO PRINCIPAL: Revis√£o, Diagrama√ß√£o e Coleta de Texto Completo ---

def processar_manuscrito(uploaded_file):
    documento_original = Document(uploaded_file)
    documento_revisado = Document()
    
    # Configura√ß√µes de Diagrama√ß√£o (A5 e Margens de Livro)
    section = documento_revisado.sections[0]
    section.page_width = Inches(5.83)
    section.page_height = Inches(8.27)
    section.left_margin = Inches(1.0)
    section.right_margin = Inches(0.6)
    section.top_margin = Inches(0.8)
    section.bottom_margin = Inches(0.8)
    
    paragrafos = documento_original.paragraphs
    total_paragrafos = len(paragrafos)
    texto_completo = ""
    
    progress_bar = st.progress(0, text="Processando 0%")
    
    for i, paragrafo in enumerate(paragrafos):
        texto_original = paragrafo.text
        texto_completo += texto_original + "\n" # Coleta o texto completo para o relat√≥rio
        
        percent_complete = int((i + 1) / total_paragrafos * 100)
        progress_bar.progress(percent_complete, text=f"Processando {percent_complete}% ({i+1}/{total_paragrafos})")

        if len(texto_original.strip()) < 10:
            documento_revisado.add_paragraph(texto_original)
            continue 

        texto_revisado = revisar_paragrafo(texto_original)
        
        novo_paragrafo = documento_revisado.add_paragraph(texto_revisado)
        novo_paragrafo.style = paragrafo.style
        
    progress_bar.progress(100, text="Processamento conclu√≠do! üéâ")
    st.success("Manuscrito revisado, com coer√™ncia checada e diagramado com sucesso.")
    
    return documento_revisado, texto_completo # Retorna os dois resultados


# --- 4. Interface do Streamlit (UI) ---

uploaded_file = st.file_uploader(
    "1. Fa√ßa o upload do seu arquivo .docx", 
    type=['docx'],
    help="O processamento de arquivos grandes pode levar alguns minutos."
)

st.warning("""
    AVISO: A diagrama√ß√£o de margens de livro (A5) foi aplicada neste DOCX.
    Para gerar o PDF/X final, utilize a fun√ß√£o "Exportar para PDF" em seu editor de texto (Word/LibreOffice).
""")

if uploaded_file is not None:
    if st.button("2. Iniciar Revis√£o, Coer√™ncia e Diagrama√ß√£o"):
        st.info("Aten√ß√£o: O processo de Pr√©-Impress√£o foi iniciado. Isso pode levar alguns minutos...")
        
        # Chama a fun√ß√£o principal que agora retorna 2 resultados
        documento_revisado, texto_completo = processar_manuscrito(uploaded_file)
        
        if documento_revisado:
            # --- 3. Gera√ß√£o do Relat√≥rio Estrutural ---
            st.subheader("Relat√≥rio de Conte√∫do (Editor-Chefe)")
            with st.spinner("Analisando ritmo e personagens para o relat√≥rio estrutural..."):
                relatorio = gerar_relatorio_estrutural(texto_completo)
            
            # Mostra o relat√≥rio na tela e permite download
            st.text_area("Relat√≥rio Estrutural da IA:", relatorio, height=300)
            
            # Prepara o relat√≥rio para download como arquivo de texto
            relatorio_buffer = BytesIO(relatorio.encode('utf-8'))
            st.download_button(
                label="3A. ‚¨áÔ∏è Baixar Relat√≥rio Estrutural (.txt)",
                data=relatorio_buffer,
                file_name="Relatorio_Estrutural.txt",
                mime="text/plain"
            )

            # Prepara e disponibiliza o DOCX revisado
            buffer = BytesIO()
            documento_revisado.save(buffer)
            buffer.seek(0)
            
            st.download_button(
                label="3B. ‚¨áÔ∏è Baixar Manuscrito Diagramado (.docx)",
                data=buffer,
                file_name=f"{uploaded_file.name.replace('.docx', '')}_FINAL_DIAGRAMADO.docx",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )
            st.balloons()
