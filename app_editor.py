import os
import streamlit as st
from openai import OpenAI # NOVA IMPORTA√á√ÉO
from docx import Document
from io import BytesIO
from docx.shared import Inches

# --- 0. Configura√ß√£o e Inicializa√ß√£o ---

# T√≠tulo do Aplicativo Web
st.set_page_config(page_title="Editor Liter√°rio IA - Pr√©-Impress√£o", layout="wide")
st.title("üìö Editor Liter√°rio com GPT AI")
st.subheader("Pr√©-Impress√£o Completa: Conte√∫do, Coer√™ncia, Diagrama√ß√£o e Capa.")

# Nome da vari√°vel de ambiente que o Streamlit ir√° ler
API_KEY_NAME = "OPENAI_API_KEY"
MODEL_NAME = "gpt-4o-mini" # Modelo r√°pido e de baixo custo da OpenAI

# Configura√ß√£o da API (Lendo a chave dos secrets do Streamlit/vari√°vel de ambiente)
try:
    API_KEY = os.environ.get(API_KEY_NAME)
    if not API_KEY and hasattr(st, 'secrets') and API_KEY_NAME in st.secrets:
         API_KEY = st.secrets[API_KEY_NAME]
    
    if not API_KEY:
        st.error(f"ERRO: A Chave de API da OpenAI ('{API_KEY_NAME}') n√£o est√° configurada.")
        st.stop()
        
    # Inicializa√ß√£o do cliente OpenAI
    client = OpenAI(api_key=API_KEY)
except Exception as e:
    st.error(f"Erro na inicializa√ß√£o da API: {e}")
    st.stop()


# --- 1. Fun√ß√£o de Chamada da API (AGORA UNIFICADA E USANDO CHAT COMPLETIONS) ---

def call_openai_api(system_prompt: str, user_content: str) -> str:
    """Fun√ß√£o gen√©rica para chamar a API da OpenAI."""
    try:
        response = client.chat.completions.create(
            model=MODEL_NAME,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_content}
            ],
            temperature=0.7,
            max_tokens=3000 # Limite de tokens para a resposta
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"[ERRO DE CONEX√ÉO DA API] Falha: {e}"


# --- 2. Prompts de Edi√ß√£o e Revis√£o ---

def get_edicao_prompt_system() -> str:
    return """
    Voc√™ √© um editor liter√°rio de n√≠vel s√™nior, com foco em fic√ß√£o.
    Sua tarefa √© revisar, editar e aprimorar o par√°grafo a seguir, garantindo que esteja pronto para a publica√ß√£o.
    Instru√ß√µes de Edi√ß√£o:
    1. **Revis√£o Gramatical e Ortogr√°fica:** Corrija todos os erros.
    2. **Edi√ß√£o de Estilo (For√ßa Narrativa):** Sugira reescritas para frases fracas, utilizando o princ√≠pio "Mostre, N√£o Diga" e favorecendo a voz ativa.
    3. **Coer√™ncia de Linguagem e Narrativa:** Mantenha um tom consistente. Se identificar nomes, locais ou fatos que contradizem o contexto de um livro, corrija sutilmente.
    ATEN√á√ÉO: Retorne *apenas* o par√°grafo revisado, sem coment√°rios, introdu√ß√µes ou explica√ß√µes.
    """

def revisar_paragrafo(paragrafo_texto: str) -> str:
    """Envia o par√°grafo para a API da OpenAI e recebe a vers√£o editada."""
    if not paragrafo_texto.strip(): return "" 
    
    system_prompt = get_edicao_prompt_system()
    user_content = f"Par√°grafo a ser editado:\n---\n{paragrafo_texto}\n---"
    
    texto_revisado = call_openai_api(system_prompt, user_content)
    
    # Se houver erro, retorna o original
    if "[ERRO DE CONEX√ÉO DA API]" in texto_revisado:
        print(f"Erro na revis√£o. Retornando original. Detalhes: {texto_revisado}")
        return paragrafo_texto
    
    return texto_revisado


# --- 3. Gera√ß√£o de Relat√≥rio Estrutural (Editor-Chefe) ---

def gerar_relatorio_estrutural(texto_completo: str) -> str:
    """Analisa o texto completo para dar feedback estrutural."""
    system_prompt = """
    Voc√™ √© um Editor-Chefe de uma grande editora. Sua tarefa √© analisar o manuscrito e gerar um breve Relat√≥rio de Revis√£o para o autor.
    Foque em: Ritmo da Narrativa, Desenvolvimento de Personagens e Estrutura Geral (in√≠cio, cl√≠max e resolu√ß√£o).
    Formate o relat√≥rio usando t√≠tulos e bullet points.
    """
    user_content = f"MANUSCRITO PARA AN√ÅLISE:\n---\n{texto_completo[:15000]}\n---"
    return call_openai_api(system_prompt, user_content)


# --- 4. Gera√ß√£o do Conte√∫do de Capa e Contracapa (Marketing) ---

def gerar_conteudo_capa_contracapa(titulo: str, autor: str, texto_completo: str) -> str:
    """Analisa o manuscrito e gera o blurb (texto da contracapa) e sugest√µes de design."""
    system_prompt = """
    Voc√™ √© um especialista em Marketing e um copywriter de best-sellers.
    Analise o manuscrito para gerar o conte√∫do da Capa e Contracapa.
    Requisitos: 1. Blurb (Contracapa): 3-4 par√°grafos curtos, envolventes, criando suspense. 2. Palavras-chave: Sugira 3 palavras-chave de marketing. 3. Sugest√£o de Imagem: Descreva a imagem ideal para a capa.
    Use o formato estrito de sa√≠da.
    """
    user_content = f"""
    T√≠tulo: {titulo}
    Autor: {autor}
    MANUSCRITO PARA AN√ÅLISE:
    ---
    {texto_completo[:15000]}
    ---
    """
    
    # Adiciona a formata√ß√£o de sa√≠da esperada (prompting de cadeia de pensamento)
    prompt_final = f"{system_prompt}\n\n{user_content}\n\nUse o seguinte formato de sa√≠da:\n## T√≠tulo: {titulo}\n## Autor: {autor}\n\n**BLURB DA CONTRACAPA:**\n[Seu texto de blurb aqui...]\n\n**PALAVRAS-CHAVE DE MARKETING:**\n[Palavra 1], [Palavra 2], [Palavra 3]\n\n**SUGEST√ÉO DE ARTE PARA A CAPA:**\n[Sua descri√ß√£o de imagem aqui...]"
    
    return call_openai_api(system_prompt, prompt_final)


# --- 5. Fun√ß√£o Principal: Processamento de Revis√£o e Diagrama√ß√£o DOCX ---

def processar_manuscrito(uploaded_file):
    documento_original = Document(uploaded_file)
    documento_revisado = Document()
    
    # Configura√ß√µes de Diagrama√ß√£o (A5 e Margens de Livro)
    section = documento_revisado.sections[0]
    section.page_width = Inches(5.83)
    section.page_height = Inches(8.27)
    section.left_margin = Inches(1.0)
    section.right_margin = Inches(0.6)
    section.top_margin = Inches(0.8)
    section.bottom_margin = Inches(0.8)
    
    paragrafos = documento_original.paragraphs
    total_paragrafos = len(paragrafos)
    texto_completo = ""
    
    progress_bar = st.progress(0, text="Processando 0%")
    
    for i, paragrafo in enumerate(paragrafos):
        texto_original = paragrafo.text
        texto_completo += texto_original + "\n"
        
        percent_complete = int((i + 1) / total_paragrafos * 100)
        progress_bar.progress(percent_complete, text=f"Processando {percent_complete}% ({i+1}/{total_paragrafos})")

        if len(texto_original.strip()) < 10:
            documento_revisado.add_paragraph(texto_original)
            continue 

        texto_revisado = revisar_paragrafo(texto_original)
        
        novo_paragrafo = documento_revisado.add_paragraph(texto_revisado)
        novo_paragrafo.style = paragrafo.style
        
    progress_bar.progress(100, text="Processamento conclu√≠do! üéâ")
    st.success("Manuscrito revisado, com coer√™ncia checada e diagramado com sucesso.")
    
    return documento_revisado, texto_completo


# --- 6. Interface do Streamlit (UI) ---

# Coleta de Metadados
st.markdown("---")
st.subheader("1. Informa√ß√µes do Livro")
col1, col2, col3 = st.columns(3)
with col1:
    book_title = st.text_input("T√≠tulo do Livro", "O √öltimo C√≥digo de Honra")
with col2:
    book_author = st.text_input("Nome do Autor", "Carlos Honorato")
with col3:
    page_count = st.number_input("Contagem Aproximada de P√°ginas", min_value=10, value=250, step=10, help="Use a contagem de p√°ginas do seu DOCX antes da diagrama√ß√£o.")


st.markdown("---")
st.subheader("2. Arquivo do Manuscrito")

uploaded_file = st.file_uploader(
    "Fa√ßa o upload do seu arquivo .docx", 
    type=['docx'],
    help="O processamento de arquivos grandes pode levar alguns minutos."
)

st.warning("""
    AVISO: A diagrama√ß√£o de margens de livro (A5) foi aplicada neste DOCX.
    Para gerar o PDF/X final, utilize a fun√ß√£o "Exportar para PDF" em seu editor de texto (Word/LibreOffice).
""")

if uploaded_file is not None and st.button("3. Iniciar PR√â-IMPRESS√ÉO COMPLETA"):
    if not book_title or not book_author:
        st.error("Por favor, preencha o T√≠tulo e o Autor antes de iniciar.")
        st.stop()
        
    st.info("Aten√ß√£o: O processo de Pr√©-Impress√£o foi iniciado. Isso pode levar alguns minutos...")
    
    # Processa o manuscrito (revis√£o e diagrama)
    documento_revisado, texto_completo = processar_manuscrito(uploaded_file)
    
    if documento_revisado:
        # --- PASSO A: Gera√ß√£o do Relat√≥rio Estrutural ---
        st.subheader("RESULTADO 1: Relat√≥rio Estrutural (Editor-Chefe)")
        with st.spinner("Analisando ritmo e personagens para o relat√≥rio estrutural..."):
            relatorio = gerar_relatorio_estrutural(texto_completo)
        
        st.text_area("Relat√≥rio Estrutural da IA:", relatorio, height=300)
        
        # --- PASSO B: Gera√ß√£o do Conte√∫do da Capa/Contracapa ---
        st.subheader("RESULTADO 2: Conte√∫do de Capa/Contracapa (Marketing)")
        with st.spinner("Criando o blurb de marketing e sugest√µes de design..."):
            conteudo_capa = gerar_conteudo_capa_contracapa(book_title, book_author, texto_completo)
        
        st.text_area("Conte√∫do de Vendas e Sugest√µes de Arte:", conteudo_capa, height=400)

        # --- PASSO C: Especifica√ß√µes T√©cnicas Finais (Lombada) ---
        st.subheader("RESULTADO 3: Especifica√ß√µes T√©cnicas para o Gr√°fico")
        
        # F√≥rmula gen√©rica para espessura da lombada
        espessura_cm = round(page_count * 0.00115 * 10, 2) 

        st.markdown(f"""
        O seu produto de pr√©-impress√£o est√° pronto. Entregue os arquivos abaixo ao seu designer gr√°fico ou gr√°fica:

        #### üìÑ Especifica√ß√µes do Livro Finalizado
        - **Formato do Miolo:** A5 (14.8cm x 21cm)
        - **N√∫mero de P√°ginas (Estimado):** {page_count}
        - **Espessura da Lombada (Estimada):** **{espessura_cm} cm**
        - **Requisito de Entrega da Gr√°fica:** PDF/X-1a ou PDF/X-3 (Gerado manualmente a partir do DOCX baixado)
        """)


        # --- PASSO D: Download dos Arquivos ---
        st.markdown("#### ‚¨áÔ∏è Downloads Finais")
        
        # Download do Relat√≥rio
        relatorio_buffer = BytesIO(relatorio.encode('utf-8'))
        st.download_button(
            label="1. Baixar Relat√≥rio Estrutural (.txt)",
            data=relatorio_buffer,
            file_name="Relatorio_Estrutural.txt",
            mime="text/plain"
        )
        
        # Download do DOCX Diagramado
        buffer = BytesIO()
        documento_revisado.save(buffer)
        buffer.seek(0)
        st.download_button(
            label="2. Baixar Manuscrito Diagramado (.docx)",
            data=buffer,
            file_name=f"{book_title.replace(' ', '_')}_FINAL_DIAGRAMADO.docx",
            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        )
        st.balloons()
