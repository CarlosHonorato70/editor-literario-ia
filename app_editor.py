# -*- coding: utf-8 -*-
"""
# Editor Pro IA: Publica√ß√£o Sem Complica√ß√µes
## Otimizado para GitHub: Um Assistente Completo de Edi√ß√£o, Revis√£o, Design e Formata√ß√£o de Livros

Este script Streamlit transforma seu manuscrito em um livro profissional, pronto para ABNT e KDP,
utilizando a intelig√™ncia artificial da OpenAI para revis√£o, marketing e design de capa,
junto com funcionalidades avan√ßadas de diagrama√ß√£o DOCX.

**Principais funcionalidades:**
- **Configura√ß√£o Inicial**: Defini√ß√£o de t√≠tulo, autor, formato KDP/Gr√°fica, estilo de diagrama√ß√£o.
- **An√°lise de Manuscrito (AI-Driven)**: Detec√ß√£o de g√™nero, tom e sugest√£o de estilos.
- **Processamento de Miolo com Checkpoint**:
    - Revis√£o par√°grafo a par√°grafo com IA (foco configur√°vel: gram√°tica, clareza, estilo).
    - Diagrama√ß√£o autom√°tica (tamanhos de corte, margens, espa√ßamentos, fontes).
    - Inser√ß√£o de elementos pr√©-textuais (Copyright, Bio do Autor, Dedicat√≥ria, Agradecimentos).
    - Marca√ß√£o de t√≠tulos para sum√°rio autom√°tico.
    - Checkpoint autom√°tico e manual para salvar o progresso.
- **Gera√ß√£o de Capa Completa com IA (DALL-E 3)**:
    - Cria√ß√£o de arte para frente, lombada e contracapa.
    - Blurb de marketing gerado por IA (edit√°vel pelo usu√°rio).
    - C√°lculos precisos de dimens√µes de capa com sangria e lombada.
- **Relat√≥rios Abrangentes**:
    - Relat√≥rio Estrutural (ritmo, personagens, trama).
    - Relat√≥rio de Conformidade KDP (diretrizes t√©cnicas).
    - Gera√ß√£o de Metadados e SEO.
- **Exporta√ß√£o Flex√≠vel**:
    - Miolo revisado e diagramado em .docx.
    - Arte da capa completa em imagem.
    - (Placeholders para) Exporta√ß√£o para EPUB e PDF para impress√£o.
    - Exporta√ß√£o de checkpoint completo do projeto.

**Como usar:**
1.  **Configure suas chaves API da OpenAI**: Defina `OPENAI_API_KEY` e `OPENAI_PROJECT_ID` como vari√°veis de ambiente ou secrets do Streamlit.
2.  **Execute o aplicativo**: `streamlit run seu_arquivo.py`
3.  Siga as abas para configurar seu projeto, processar o manuscrito, gerar a capa e exportar os arquivos.

**Desenvolvimento Futuro:**
- Implementa√ß√£o completa de exporta√ß√£o para EPUB e PDF de alta qualidade para impress√£o.
- An√°lise sem√¢ntica mais profunda para verifica√ß√£o de consist√™ncia de trama/personagens.
- Interface de "Track Changes" interativa.
- Overlays para foto do autor e c√≥digo de barras na capa.
- Mais estilos de diagrama√ß√£o e templates.

**Autor:** Adapta AI
"""

import os
import streamlit as st
from openai import OpenAI
from docx import Document
from io import BytesIO
from docx.shared import Inches, Pt, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH
import requests
from docx.enum.style import WD_STYLE_TYPE
from docx.oxml.ns import qn # Para campos do Word como TOC
from docx.oxml import OxmlElement # Para campos do Word como TOC
import time
from typing import Optional, Dict, Tuple, Any, List
import math
import json

# --- IMPORTA√á√ïES ADICIONAIS (para funcionalidades futuras ou sugeridas) ---
# import textstat # Para c√°lculo de legibilidade
# import langdetect # Para detec√ß√£o de idioma
# from PIL import Image # Para manipula√ß√£o de imagens (p√≥s-processamento de capa)
# import pypandoc # Para convers√£o DOCX para EPUB/PDF (requer Pandoc instalado)
# from fpdf import FPDF # Alternativa para gera√ß√£o de PDF (mais manual)


# --- CONFIGURA√á√ÉO DE CONSTANTES ---

# 1. DICION√ÅRIO DE TAMANHOS KDP/GR√ÅFICA (Miolo)
KDP_SIZES: Dict[str, Dict] = {
    "Padr√£o EUA (6x9 in)": {"name": "6 x 9 in", "width_in": 6.0, "height_in": 9.0, "width_cm": 15.24, "height_cm": 22.86, "papel_fator": 0.00115},
    "Padr√£o A5 (5.83x8.27 in)": {"name": "A5 (14.8 x 21 cm)", "width_in": 5.83, "height_in": 8.27, "width_cm": 14.8, "height_cm": 21.0, "papel_fator": 0.00115},
    "Pocket (5x8 in)": {"name": "5 x 8 in", "width_in": 5.0, "height_in": 8.0, "width_cm": 12.7, "height_cm": 20.32, "papel_fator": 0.00115},
    "Maior (7x10 in)": {"name": "7 x 10 in", "width_in": 7.0, "height_in": 10.0, "width_cm": 17.78, "height_cm": 25.4, "papel_fator": 0.00115},
    "Padr√£o Brasileiro (16x23 cm)": {"name": "16 x 23 cm", "width_in": 6.3, "height_in": 9.06, "width_cm": 16.0, "height_cm": 23.0, "papel_fator": 0.00115},
}

# 2. TEMPLATES DE ESTILO DE DIAGRAMA√á√ÉO (Fic√ß√£o e Acad√™mico)
STYLE_TEMPLATES: Dict[str, Dict] = {
    "Romance Cl√°ssico (Garamond)": {"font_name": "Garamond", "font_size_pt": 11, "line_spacing": 1.15, "indent": 0.5, "para_space_after": 0},
    "Thriller Moderno (Droid Serif)": {"font_name": "Droid Serif", "font_size_pt": 10, "line_spacing": 1.05, "indent": 0.3, "para_space_after": Pt(3)},
    "Acad√™mico/ABNT (Times New Roman 12)": {"font_name": "Times New Roman", "font_size_pt": 12, "line_spacing": 1.5, "indent": 0.0, "para_space_after": 0},
    "Fantasia √âpica (Cinzel)": {"font_name": "Cinzel", "font_size_pt": 12, "line_spacing": 1.2, "indent": 0.4, "para_space_after": Pt(2)},
    "Minimalista (Open Sans)": {"font_name": "Open Sans", "font_size_pt": 10, "line_spacing": 1.1, "indent": 0.2, "para_space_after": Pt(5)},
}

# 3. CONFIGURA√á√ÉO DA IA
API_KEY_NAME = "OPENAI_API_KEY"
PROJECT_ID_NAME = "OPENAI_PROJECT_ID"
MODEL_NAME = "gpt-4o-mini" # Voc√™ pode mudar para "gpt-4o" se quiser mais poder e tiver or√ßamento.

# --- INICIALIZA√á√ÉO DA IA E LAYOUT ---
st.set_page_config(page_title="Editor Pro IA", layout="wide", initial_sidebar_state="expanded")
st.title("üöÄ Editor Pro IA: Publica√ß√£o Sem Complica√ß√µes")
st.subheader("Transforme seu manuscrito em um livro profissional, pronto para ABNT e KDP.")

# Vari√°veis globais para rastrear o status da API
client: Optional[OpenAI] = None
API_KEY: Optional[str] = None
PROJECT_ID: Optional[str] = None
is_api_ready: bool = False # Inicializa como False

# Tenta obter as chaves de seguran√ßa do ambiente (secrets ou vari√°veis de ambiente)
try:
    API_KEY = st.secrets.get(API_KEY_NAME) or os.environ.get(API_KEY_NAME)
    PROJECT_ID = st.secrets.get(PROJECT_ID_NAME) or os.environ.get(PROJECT_ID_NAME)

    if API_KEY and PROJECT_ID:
        client = OpenAI(api_key=API_KEY, project=PROJECT_ID)
        is_api_ready = True
    else:
        st.sidebar.error("‚ùå Conex√£o OpenAI Inativa.")
        st.warning(f"Chave '{API_KEY_NAME}' e/ou ID do Projeto '{PROJECT_ID_NAME}' n√£o configurados. A revis√£o e a gera√ß√£o de capa **N√ÉO** funcionar√£o.")

    if is_api_ready:
        st.sidebar.success("‚úÖ Conex√£o OpenAI Pronta!")

except Exception as e:
    st.error(f"Erro na inicializa√ß√£o do ambiente (secrets/env). Detalhes: {e}")
    client = None
    is_api_ready = False


# --- FUN√á√ïES DE AUX√çLIO ---

def call_openai_api(system_prompt: str, user_content: str, max_tokens: int = 3000, retries: int = 5) -> str:
    """
    Fun√ß√£o gen√©rica para chamar a API da OpenAI com backoff exponencial.
    O n√∫mero de tentativas √© 5 para resili√™ncia contra instabilidade de rede ou da API.
    """
    global client, is_api_ready

    if not is_api_ready or client is None:
        return "[ERRO DE CONEX√ÉO DA API] Chaves OPENAI_API_KEY e/ou OPENAI_PROJECT_ID n√£o configuradas."

    for i in range(retries):
        try:
            response = client.chat.completions.create(
                model=MODEL_NAME,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_content}
                ],
                temperature=0.7,
                max_tokens=max_tokens
            )
            return response.choices[0].message.content.strip()
        except Exception as e:
            error_msg = str(e)

            if "Invalid API key" in error_msg or "Error code: 401" in error_msg:
                st.error(f"ERRO DE AUTENTICA√á√ÉO: Sua chave de API est√° incorreta ou expirada.")
                return "[ERRO DE CONEX√ÉO DA API] Chave de API Inv√°lida."
            elif "exceeded your current quota" in error_msg:
                st.error(f"ERRO DE QUOTA: Sua conta OpenAI excedeu a quota. Por favor, verifique seu plano de uso.")
                return "[ERRO DE CONEX√ÉO DA API] Quota Excedida."
            elif i < retries - 1:
                wait_time = 2 ** i # Backoff exponencial
                st.warning(f"Erro de API/Rede. Tentando novamente em {wait_time} segundos... (Tentativa {i+1}/{retries})")
                time.sleep(wait_time)
            else:
                st.error(f"Falha ao se comunicar com a OpenAI ap√≥s {retries} tentativas. Detalhes: {e}")
                return f"[ERRO DE CONEX√ÉO DA API] Falha: {e}"

    return "[ERRO DE CONEX√ÉO DA API] Tentativas de conex√£o esgotadas."

def run_fast_process_with_timer(message: str, func: callable, *args: Any, **kwargs: Any) -> Tuple[str, float]:
    start_time = time.time()

    with st.spinner(f"‚è≥ {message}..."):
        result = func(*args, **kwargs)

    duration = round(time.time() - start_time, 1)

    if "[ERRO DE CONEX√ÉO DA API]" in str(result):
        st.error(f"‚ùå {message} falhou em **{duration}s**. Verifique o log de erros.")
        return result, duration
    else:
        st.success(f"‚úÖ {message} conclu√≠da em **{duration}s**.")
        return result, duration

# --- FUN√á√ïES ESPEC√çFICAS DA IA ---

def analisar_genero_e_tonalidade(texto_completo: str) -> Dict[str, str]:
    """Analisa o texto para detectar g√™nero e tonalidade predominante."""
    if not is_api_ready:
        return {"genero": "N√£o detectado (API inativa)", "tonalidade": "N√£o detectada (API inativa)"}

    system_prompt = """
    Voc√™ √© um analista liter√°rio experiente. Sua tarefa √© ler um trecho de um manuscrito e identificar:
    1. O g√™nero liter√°rio predominante (ex: Romance, Fic√ß√£o Cient√≠fica, Thriller, Fantasia, Drama, N√£o Fic√ß√£o, Acad√™mico, Autoajuda, Biografia, Poesia, etc.). Escolha um g√™nero principal.
    2. A tonalidade geral do texto (ex: formal, informal, humor√≠stico, s√©rio, sombrio, leve, √©pico, introspectivo, did√°tico, etc.). Escolha 1 a 3 descritores de tonalidade.
    Responda em formato JSON, como no exemplo: {"genero": "Romance Hist√≥rico", "tonalidade": "S√©rio, Dram√°tico"}.
    N√£o adicione nenhum outro texto al√©m do JSON.
    """
    user_content = f"Manuscrito para an√°lise (amostra): {texto_completo[:5000]}"
    
    try:
        response_json = call_openai_api(system_prompt, user_content, max_tokens=100)
        # Tenta corrigir JSON malformado se necess√°rio
        if response_json and not response_json.startswith('{'):
            response_json = '{' + response_json.split('{', 1)[1] if '{' in response_json else response_json
        if response_json and not response_json.endswith('}'):
            response_json = response_json.split('}', 1)[0] + '}' if '}' in response_json else response_json

        parsed_response = json.loads(response_json)
        return parsed_response
    except json.JSONDecodeError as e:
        st.warning(f"Erro ao analisar g√™nero/tonalidade (JSON inv√°lido da IA): {e}. Resposta da IA: {response_json[:200]}...")
        return {"genero": "Erro na detec√ß√£o (JSON)", "tonalidade": "Erro na detec√ß√£o (JSON)"}
    except Exception as e:
        st.error(f"Erro inesperado na an√°lise de g√™nero/tonalidade: {e}")
        return {"genero": "Erro inesperado", "tonalidade": "Erro inesperado"}


def revisar_paragrafo(paragrafo_texto: str, delay_s: float, foco_revisao: str = "completa") -> str:
    """Revis√£o de um √∫nico par√°grafo, utilizando o delay ajust√°vel e foco configur√°vel."""

    if not paragrafo_texto.strip(): return ""
    
    prompts_foco = {
        "completa": "Voc√™ √© um editor liter√°rio experiente e perfeccionista. Revise, edite e aprimore o par√°grafo a seguir. Sua tarefa √© corrigir gram√°tica, ortografia, pontua√ß√£o, aprimorar o estilo e a fluidez, garantir a clareza e concis√£o, e verificar a coer√™ncia interna. Fa√ßa as mudan√ßas necess√°rias para que o texto seja profissional e envolvente, mas sempre respeitando a voz original do autor. Retorne *apenas* o par√°grafo revisado, sem coment√°rios, explica√ß√µes ou sauda√ß√µes.",
        "gramatica_ortografia": "Voc√™ √© um revisor gramatical e ortogr√°fico extremamente rigoroso. Sua √∫nica tarefa √© corrigir a gram√°tica, ortografia e pontua√ß√£o do par√°grafo a seguir. N√£o altere o estilo, a escolha de palavras ou o conte√∫do al√©m do estritamente necess√°rio para a corre√ß√£o. Retorne *apenas* o par√°grafo revisado, sem coment√°rios.",
        "clareza_concisao": "Voc√™ √© um especialista em comunica√ß√£o clara e concisa. Revise o par√°grafo a seguir para remover redund√¢ncias, tornar as frases mais diretas, eliminar jarg√µes desnecess√°rios e otimizar a clareza da mensagem. O objetivo √© que o texto seja facilmente compreendido sem perda de profundidade. Mantenha o tom original. Retorne *apenas* o par√°grafo revisado, sem coment√°rios.",
        "estilo_fluidez": "Voc√™ √© um estilista de texto. Aprimore o estilo do par√°grafo a seguir, garantindo uma leitura mais fluida, um ritmo agrad√°vel e uma linguagem mais envolvente e expressiva. Fa√ßa sugest√µes criativas para melhorar a beleza e o impacto do texto, mas sempre mantendo a voz e a inten√ß√£o do autor. Retorne *apenas* o par√°grafo revisado, sem coment√°rios."
    }
    system_prompt = prompts_foco.get(foco_revisao, prompts_foco["completa"])

    user_content = f"Par√°grafo a ser editado: {paragrafo_texto}"
    texto_revisado = call_openai_api(system_prompt, user_content, max_tokens=500)

    if "[ERRO DE CONEX√ÉO DA API]" in texto_revisado:
        # Se houver erro de API, retorna o texto original para n√£o perder o par√°grafo.
        return paragrafo_texto

    time.sleep(delay_s)
    return texto_revisado

def gerar_conteudo_marketing(titulo: str, autor: str, texto_completo: str) -> str:
    system_prompt = "Voc√™ √© um Copywriter de Best-sellers, mestre em criar textos de vendas que capturam a imagina√ß√£o. Sua tarefa √© criar um blurb de contracapa irresist√≠vel para um livro, que desperte a curiosidade e o desejo de leitura. O blurb deve ter entre 3 a 4 par√°grafos, ser conciso, enigm√°tico e destacar os pontos fortes da narrativa ou do tema. Gere o resultado *APENAS* com o texto do blurb, sem t√≠tulos, introdu√ß√µes ou qualquer coment√°rio adicional."
    user_content = f"Crie um blurb de contracapa de 3-4 par√°grafos para este livro, focado em atrair o leitor e despertar o interesse: T√≠tulo: {titulo}, Autor: {autor}. Amostra do conte√∫do para contextualiza√ß√£o: {texto_completo[:5000]}"
    return call_openai_api(system_prompt, user_content, max_tokens=1000)

def gerar_relatorio_estrutural(titulo: str, autor: str, texto_completo: str) -> str:
    system_prompt = """
    Voc√™ √© um Editor-Chefe com vasta experi√™ncia em an√°lise narrativa e editorial.
    Sua tarefa √© gerar um Relat√≥rio de Revis√£o Estrutural DETALHADO para o autor, focado em aprimorar a obra.
    O relat√≥rio deve ser construtivo, profissional e f√°cil de entender, utilizando t√≠tulos e bullet points.

    Aborde os seguintes pontos:
    ### 1. Ritmo da Narrativa
    - Avalie a progress√£o da hist√≥ria: h√° momentos arrastados ou apressados?
    - Sugest√µes para manter o engajamento do leitor.
    ### 2. Desenvolvimento de Personagens
    - An√°lise dos personagens principais (arcos de desenvolvimento, motiva√ß√µes, consist√™ncia).
    - Avalia√ß√£o dos personagens secund√°rios e sua fun√ß√£o na trama.
    ### 3. Estrutura Geral e Trama
    - In√≠cio, meio e fim: s√£o claros e eficazes?
    - Pontos de virada e cl√≠max: s√£o impactantes e bem posicionados?
    - Existem inconsist√™ncias na trama ou 'buracos' no enredo?
    - Sugest√µes para fortalecer a coer√™ncia e a originalidade da hist√≥ria.
    ### 4. Tom e Estilo
    - O tom √© consistente? Ele serve √† hist√≥ria?
    - Avalia√ß√£o da voz autoral e como ela contribui para a experi√™ncia de leitura.
    ### 5. Recomenda√ß√µes Finais
    - Sum√°rio das principais √°reas para aprimoramento.

    Apresente o relat√≥rio de forma clara e objetiva.
    """
    user_content = f"MANUSCRITO PARA AN√ÅLISE E RELAT√ìRIO ESTRUTURAL. T√≠tulo: '{titulo}', Autor: '{autor}'. Amostra para an√°lise: {texto_completo[:15000]}"
    return call_openai_api(system_prompt, user_content)

def gerar_elementos_pre_textuais(titulo: str, autor: str, ano: int, genero: str, tonalidade: str, texto_completo_amostra: str) -> str:
    system_prompt = f"""
    Voc√™ √© um gerente de editora especializado em elementos pr√©-textuais. Sua tarefa √© gerar o conte√∫do essencial de abertura e fechamento para um livro, seguindo as melhores pr√°ticas editoriais.
    Gere o resultado no formato estrito, conforme as seguintes se√ß√µes obrigat√≥rias.
    Use o ano {ano} para o copyright. O g√™nero √© '{genero}' e a tonalidade √© '{tonalidade}'.

    ### 1. P√°gina de Copyright e Cr√©ditos
    [Texto de Copyright e Cr√©ditos completos e profissionais para o ano {ano}. Inclua informa√ß√µes padr√£o de direitos autorais, editora (use "Editora AI Pro" como exemplo), e aviso de que a obra n√£o pode ser reproduzida. Adicione um placeholder para o ISBN. Adapte a linguagem para o g√™nero e tonalidade.]
    ### 2. P√°gina 'Dedicat√≥ria'
    [Uma Dedicat√≥ria breve e emocionante, personalizada para o livro. Deve ser concisa e elegante. Se o g√™nero ou tonalidade n√£o se adequarem, pode ser um "Aos sonhadores..." ou algo po√©tico.]
    ### 3. P√°gina 'Agradecimentos'
    [Uma se√ß√£o de Agradecimentos sinceros e bem estruturados, idealmente em 2-3 par√°grafos. Adapte o tom ao livro. Pode mencionar inspira√ß√µes, fam√≠lia, equipe, etc.]
    ### 4. P√°gina 'Sobre o Autor'
    [Bio envolvente de 2-3 par√°grafos sobre o autor ({autor}), formatada para uma p√°gina de livro. Destaque qualifica√ß√µes, paix√µes e conex√£o com o tema ou g√™nero da obra. Use um tom profissional e cativante.]
    """
    user_content = f"""
    T√≠tulo: {titulo}, Autor: {autor}, Ano: {ano}. G√™nero: {genero}, Tonalidade: {tonalidade}.
    Analise o tom do manuscrito (Amostra): {texto_completo_amostra}
    """
    return call_openai_api(system_prompt, user_content)

def gerar_relatorio_conformidade_kdp(titulo: str, autor: str, page_count: int, format_data: Dict, espessura_cm: float, capa_largura_total_cm: float, capa_altura_total_cm: float) -> str:
    tamanho_corte = format_data['name']
    largura_miolo_cm = format_data['width_cm']
    altura_miolo_cm = format_data['height_cm']
    system_prompt_kdp = """
    Voc√™ √© um Especialista T√©cnico em Publica√ß√£o e Conformidade da Amazon KDP. Sua tarefa √© gerar um Relat√≥rio de Conformidade minucioso, focando no upload bem-sucedido para Livros F√≠sicos (Brochura) e Livros Digitais (eBooks).
    O relat√≥rio deve ser pr√°tico, claro e utilizar um formato de lista e t√≠tulos para f√°cil compreens√£o.
    """
    prompt_kdp = f"""
    Gere um relat√≥rio de conformidade KDP para o livro '{titulo}' por '{autor}'.
    
    ### 1. Livro F√≠sico (Brochura - Especifica√ß√µes T√©cnicas)
    - **Tamanho de Corte Final (Miolo):** {tamanho_corte} ({largura_miolo_cm} x {altura_miolo_cm} cm).
    - **Espessura da Lombada (Calculada):** **{espessura_cm} cm**.
    - **Dimens√µes do Arquivo de Capa (Arte Completa com Sangria):** **{capa_largura_total_cm} cm (Largura Total) x {capa_altura_total_cm} cm (Altura Total)**.
      *Recomenda√ß√£o:* Certifique-se de que a arte da capa tenha 0.3 cm de sangria extra em todos os lados (frente, lombada, verso) al√©m das dimens√µes calculadas.
    - **Margens do Miolo (DOCX/PDF):**
      *   **Margem Interna (Lado da Lombada):** Recomendado 1.0 a 1.25 polegadas (2.54 a 3.17 cm) para livros com mais de 150 p√°ginas para garantir que o texto n√£o seja cortado na dobra.
      *   **Margem Externa, Superior, Inferior:** M√≠nimo de 0.25 polegadas (0.64 cm), mas preferencialmente 0.5 a 0.8 polegadas para uma leitura confort√°vel.
    - **Resolu√ß√£o de Imagens:** Todas as imagens no miolo devem ter no m√≠nimo 300 DPI para impress√£o de qualidade.
    
    ### 2. Checklist de Miolo (DOCX/PDF para Impress√£o)
    - Confirme que todos os t√≠tulos de cap√≠tulos est√£o marcados com o estilo **'T√≠tulo 1'** (ou equivalente) no DOCX para gerar o Sum√°rio/TOC autom√°tico e navega√ß√£o de e-book.
    - Verifique se as quebras de p√°gina foram usadas corretamente entre os cap√≠tulos e n√£o apenas espa√ßos ou `Enter` repetidos.
    - Garanta que as fontes utilizadas sejam incorporadas no PDF final para impress√£o.
    - Certifique-se de que o texto esteja justificado e a hifeniza√ß√£o esteja ativada para uma apar√™ncia profissional.
    
    ### 3. Livro Digital (eBook - Formato EPUB)
    - **Recomenda√ß√£o de Formato:** Use EPUB limpo para melhor compatibilidade e reflow. Evite PDF para e-books (exceto em casos muito espec√≠ficos de design fixo).
    - **Navega√ß√£o:** Verifique se o TOC (Sum√°rio) est√° clic√°vel e funcional.
    - **Imagens:** Otimize imagens para web (menor tamanho de arquivo, mas boa qualidade) e adicione "alt text" para acessibilidade.
    - **Formata√ß√£o:** Evite quebras de p√°gina for√ßadas excessivas; o texto deve fluir naturalmente.
    
    ### 4. Otimiza√ß√£o de Metadados (SEO B√°sico KDP)
    Sugira 3 categorias de nicho da Amazon (o mais espec√≠fico poss√≠vel) e 3 palavras-chave de cauda longa (frases de busca de 3 ou mais palavras) para otimizar a listagem do livro '{titulo}' por '{autor}' na Amazon. Pense como um leitor procurando por este livro.
    """
    return call_openai_api(system_prompt_kdp, prompt_kdp)


def gerar_metadados_seo(titulo: str, autor: str, genero: str, blurb: str, texto_completo: str) -> str:
    """Gera sugest√µes de metadados e palavras-chave para SEO."""
    if not is_api_ready:
        return "[ERRO DE CONEX√ÉO DA API] N√£o foi poss√≠vel gerar metadados SEO."

    system_prompt = """
    Voc√™ √© um especialista em marketing de livros e SEO para plataformas como Amazon KDP e livrarias online.
    Sua tarefa √© gerar metadados otimizados para um livro, que ajudem a aumentar sua visibilidade e vendas.
    Gere uma descri√ß√£o atraente, palavras-chave de cauda longa, categorias de nicho, e sugest√µes de p√∫blico-alvo.
    Utilize o formato de lista e t√≠tulos.
    """
    user_content = f"""
    Gere metadados SEO para o seguinte livro:
    T√≠tulo: {titulo}
    Autor: {autor}
    G√™nero Detectado: {genero}
    Blurb (Contracapa): {blurb}
    Amostra do Texto: {texto_completo[:5000]}

    Inclua:
    ### 1. Descri√ß√£o Curta (1-2 frases)
    ### 2. Descri√ß√£o Longa (1-2 par√°grafos, focando nos elementos de venda e mist√©rio/trama)
    ### 3. Categorias de Nicho KDP (3 categorias altamente espec√≠ficas)
    ### 4. Palavras-chave de Cauda Longa (7-10 palavras-chave que um leitor real usaria)
    ### 5. P√∫blico-Alvo Sugerido (2-3 exemplos de quem leria este livro)
    """
    return call_openai_api(system_prompt, user_content, max_tokens=1500)


def gerar_capa_ia_completa(prompt_visual: str, blurb: str, autor: str, titulo: str, largura_cm: float, altura_cm: float, espessura_cm: float) -> str:
    """Chama a API DALL-E 3 para gerar a imagem da capa COMPLETA com texto."""

    global client, is_api_ready

    if not is_api_ready or client is None:
        return "[ERRO GERA√á√ÉO DE CAPA] Chaves OPENAI_API_KEY e/ou OPENAI_PROJECT_ID n√£o configuradas."

    # DALL-E 3 tem limita√ß√µes na precis√£o de texto e composi√ß√£o para pr√©-impress√£o.
    # O prompt abaixo tenta ser o mais detalhado poss√≠vel para guiar a IA.
    # **Nota**: Para controle total de texto, fontes e posicionamento, seria necess√°rio
    # usar uma ferramenta de edi√ß√£o de imagem ap√≥s a gera√ß√£o da arte principal.
    full_prompt = f"""
    Crie uma imagem de CAPA COMPLETA E √öNICA para impress√£o, com texto detalhado e posicionamento.
    As dimens√µes f√≠sicas totais para a arte completa da capa s√£o: {largura_cm} cm (largura total) x {altura_cm} cm (altura total),
    incluindo 0.3 cm de sangria em todos os lados.
    A lombada tem {espessura_cm} cm de espessura, localizada no centro exato da largura total da capa.

    O design deve seguir o estilo visual espec√≠fico e detalhado: "{prompt_visual}".
    A arte DEVE incluir os seguintes elementos TEXTUAIS e visuais, com aten√ß√£o √† legibilidade e est√©tica para impress√£o:

    **1. CAPA FRONTAL (lado direito da imagem completa):**
       - T√≠tulo: '{titulo}' (com fonte grande, impactante, leg√≠vel e estilizada para o g√™nero).
       - Autor: '{autor}' (com fonte menor, mas clara, posicionada abaixo do t√≠tulo).
       - O estilo visual descrito em '{prompt_visual}' deve ser o foco principal aqui, criando uma cena cativante.

    **2. LOMBADA (se√ß√£o central da imagem completa, entre a frente e o verso):**
       - T√≠tulo: '{titulo}' (CLARAMENTE vis√≠vel, texto centralizado e verticalmente orientado, leg√≠vel).
       - Autor: '{autor}' (abaixo do t√≠tulo na lombada, centralizado e verticalmente orientado).
       - A arte de fundo deve fluir de forma coesa da capa frontal para a contracapa, passando pela lombada.

    **3. CONTRACAPA (lado esquerdo da imagem completa):**
       - Blurb de Vendas: Texto: "{blurb[:700]}" (Use o m√°ximo do texto poss√≠vel do blurb fornecido. O texto deve ser formatado para ser leg√≠vel, com par√°grafos. N√£o use todo o blurb se for muito longo, priorize o in√≠cio).
       - Deixe um espa√ßo claro na parte inferior esquerda ou direita da contracapa para um futuro c√≥digo de barras ISBN (aproximadamente 3x2 cm). N√£o gere um c√≥digo de barras, apenas o espa√ßo vazio.
       - O design de fundo deve complementar a capa frontal e lombada, criando uma composi√ß√£o harmoniosa.

    Crie uma composi√ß√£o coesa, profissional e pronta para impress√£o que se estenda pela frente, lombada e verso.
    A resolu√ß√£o deve ser ideal para impress√£o de alta qualidade.
    """

    try:
        response = client.images.generate(
            model="dall-e-3",
            prompt=full_prompt,
            size="1792x1024", # Tamanho otimizado para capas completas, horizontal
            quality="hd",
            n=1
        )
        image_url = response.data[0].url
        return image_url
    except Exception as e:
        return f"[ERRO GERA√á√ÉO DE CAPA] Falha ao gerar a imagem: {e}. Verifique se sua conta OpenAI tem cr√©ditos para DALL-E 3 e se o prompt n√£o √© muito restritivo ou complexo."

# --- FUN√á√ïES DOCX AVAN√áADAS ---

def set_normal_style(documento: Document, style_data: Dict):
    """Configura o estilo 'Normal' do documento com base nos dados do template."""
    style = documento.styles['Normal']
    style.font.name = style_data['font_name']
    style.font.size = Pt(style_data['font_size_pt'])
    paragraph_format = style.paragraph_format
    paragraph_format.line_spacing = style_data['line_spacing']
    paragraph_format.first_line_indent = Inches(style_data['indent'])
    paragraph_format.space_after = style_data['para_space_after']
    # Define justifica√ß√£o padr√£o para o estilo Normal (corpo do texto)
    paragraph_format.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY

def set_heading1_style(documento: Document, style_data: Dict):
    """Configura o estilo 'Heading 1' para t√≠tulos de cap√≠tulo."""
    h1_style = documento.styles['Heading 1']
    h1_style.font.name = style_data['font_name']
    h1_style.font.size = Pt(style_data['font_size_pt'] * 1.8) # T√≠tulos maiores
    h1_style.font.bold = True
    h1_style.paragraph_format.alignment = WD_ALIGN_PARAGRAPH.CENTER
    h1_style.paragraph_format.space_before = Pt(24)
    h1_style.paragraph_format.space_after = Pt(12)

def set_quote_style(documento: Document, style_data: Dict):
    """Configura um estilo para cita√ß√µes em bloco."""
    if 'Quote' not in documento.styles:
        documento.styles.add_style('Quote', WD_STYLE_TYPE.PARAGRAPH)
    quote_style = documento.styles['Quote']
    quote_style.font.name = style_data['font_name']
    quote_style.font.size = Pt(style_data['font_size_pt'] * 0.9) # Um pouco menor
    quote_style.paragraph_format.left_indent = Inches(0.5)
    quote_style.paragraph_format.right_indent = Inches(0.5)
    quote_style.paragraph_format.space_before = Pt(12)
    quote_style.paragraph_format.space_after = Pt(12)
    quote_style.paragraph_format.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
    quote_style.font.italic = True # Cita√ß√µes em it√°lico por padr√£o

def adicionar_pagina_rosto(documento: Document, titulo: str, autor: str, style_data: Dict):
    font_name = style_data['font_name']
    documento.add_page_break()
    p_title = documento.add_paragraph()
    p_title.alignment = WD_ALIGN_PARAGRAPH.CENTER
    p_title_run = p_title.add_run(titulo)
    p_title_run.bold = True
    p_title_run.font.size = Pt(28)
    p_title_run.font.name = font_name
    for _ in range(5):
        documento.add_paragraph() # Espa√ßo
    p_author = documento.add_paragraph()
    p_author.alignment = WD_ALIGN_PARAGRAPH.CENTER
    p_author_run = p_author.add_run(autor)
    p_author_run.font.size = Pt(18)
    p_author_run.font.name = font_name
    documento.add_page_break()

def adicionar_pagina_generica(documento: Document, titulo: str, subtitulo: Optional[str] = None, content_text: Optional[str] = None):
    documento.add_page_break()
    p_header = documento.add_paragraph()
    p_header.alignment = WD_ALIGN_PARAGRAPH.CENTER
    p_header_run = p_header.add_run(titulo)
    p_header_run.bold = True
    p_header_run.font.size = Pt(18)
    
    if subtitulo:
        p_sub = documento.add_paragraph()
        p_sub.alignment = WD_ALIGN_PARAGRAPH.CENTER
        p_sub_run = p_sub.add_run(subtitulo)
        p_sub_run.italic = True
        p_sub_run.font.size = Pt(12)
    
    documento.add_paragraph("") # Espa√ßo

    if content_text:
        # Adiciona o conte√∫do fornecido
        for line in content_text.split('\n'):
            if line.strip():
                if line.strip().startswith('###'): # Trata sub-t√≠tulos do conte√∫do
                    sub_header_p = documento.add_paragraph(line.strip().replace('### ', ''), style='Heading 2')
                else:
                    documento.add_paragraph(line.strip(), style='Normal')
    else:
        # Mensagens padr√£o se n√£o houver conte√∫do espec√≠fico
        if titulo == "Sum√°rio":
            p_inst = documento.add_paragraph("‚ö†Ô∏è Para gerar e atualizar o √≠ndice autom√°tico, use a fun√ß√£o 'Refer√™ncias' -> 'Sum√°rio' do seu editor de texto. Todos os t√≠tulos de cap√≠tulo j√° foram marcados (**Estilo: T√≠tulo 1**). Ap√≥s o download do DOCX, clique com o bot√£o direito no Sum√°rio e escolha 'Atualizar Campo'.")
        else:
            p_inst = documento.add_paragraph("‚ö†Ô∏è Este √© um placeholder. Insira o conte√∫do real aqui ap√≥s o download. O espa√ßo e a numera√ß√£o j√° est√£o configurados.")
        p_inst.alignment = WD_ALIGN_PARAGRAPH.CENTER
        p_inst.runs[0].font.size = Pt(10)
        p_inst.runs[0].font.color.rgb = RGBColor(0x80, 0x80, 0x80) # Cinza para indicar placeholder
    
    documento.add_page_break()

def adicionar_campo_sumario(documento: Document):
    """Adiciona um campo de sum√°rio atualiz√°vel do Word."""
    paragraph = documento.add_paragraph()
    # Adiciona o campo TOC. O usu√°rio precisar√° atualiz√°-lo no Word.
    # Isto √© um pouco complexo com python-docx, precisa de OxmlElement.
    # Alternativamente, a mensagem de instru√ß√£o j√° √© funcional.
    # Exemplo simplificado de placeholder para o campo.
    p = documento.add_paragraph()
    run = p.add_run()
    fldChar = OxmlElement('w:fldChar')
    fldChar.set(qn('w:fldCharType'), 'begin')
    run._r.append(fldChar)
    instrText = OxmlElement('w:instrText')
    instrText.set(qn('xml:space'), 'preserve')
    instrText.text = 'TOC \o "1-3" \h \z \u' # Isso instrui o Word a construir o TOC
    run._r.append(instrText)
    fldChar = OxmlElement('w:fldChar')
    fldChar.set(qn('w:fldCharType'), 'end')
    run._r.append(fldChar)

def configurar_cabecalho_rodape(documento: Document, book_title: str, book_author: str, start_page_num: int = 1):
    """
    Configura cabe√ßalhos e rodap√©s com n√∫mero de p√°gina e informa√ß√µes do livro.
    Inicia a numera√ß√£o a partir de uma p√°gina espec√≠fica, deixando as p√°ginas iniciais sem n√∫meros.
    """
    section = documento.sections[0] # Assume um √∫nico documento, se√ß√µes podem ser adicionadas para maior controle.

    # Desabilitar "Link to Previous" se houver m√∫ltiplas se√ß√µes
    # section.header.is_linked_to_previous = False
    # section.footer.is_linked_to_previous = False

    # Configurar rodap√© para n√∫meros de p√°gina
    # Diferenciar primeira p√°gina
    # section.header.is_linked_to_previous = False # Para ter cabe√ßalhos diferentes
    # section.footer.is_linked_to_previous = False # Para ter rodap√©s diferentes

    # A python-docx n√£o lida nativamente com a numera√ß√£o inicial da p√°gina ou 'start_page_num' facilmente
    # para que seja refletido no DOCX nativamente sem a interven√ß√£o do usu√°rio no Word.
    # O que podemos fazer √© configurar um rodap√© padr√£o.

    # Para simular o "in√≠cio da numera√ß√£o", a melhor abordagem √© instruir o usu√°rio
    # no documento final, ou usar m√∫ltiplas se√ß√µes no DOCX.
    # Por simplicidade em um √∫nico arquivo, vamos configurar rodap√© padr√£o que o usu√°rio
    # ter√° que ajustar no Word para come√ßar a numera√ß√£o certa.

    # Para rodap√©s: geralmente n√∫meros √≠mpares √† direita, pares √† esquerda (livros).
    # Como python-docx n√£o diferencia 'odd_page_footer' de forma f√°cil aqui,
    # deixamos um padr√£o para o usu√°rio editar.

    # Adicionar cabe√ßalho (apenas a partir da p√°gina do primeiro cap√≠tulo, idealmente)
    # Aqui, vamos adicionar para todas as p√°ginas e o usu√°rio pode remover nos pr√©-textuais
    # ou podemos usar m√∫ltiplas se√ß√µes. Por enquanto, s√≥ a primeira se√ß√£o.

    # Add page numbers to footer
    # Iterate through all sections (if multiple are used for different page numbering)
    # For a single section, apply to first footer.

    # Primeiro, limpa qualquer conte√∫do existente para garantir controle
    # for paragraph in section.footer.paragraphs:
    #     paragraph._element.getparent().remove(paragraph._element)

    # Adiciona a numera√ß√£o de p√°gina no rodap√©
    footer_paragraph = section.footer.paragraphs[0] if section.footer.paragraphs else section.footer.add_paragraph()
    footer_paragraph.alignment = WD_ALIGN_PARAGRAPH.RIGHT # Padr√£o: n√∫mero √† direita
    # Adiciona o campo de n√∫mero de p√°gina
    run = footer_paragraph.add_run()
    fldChar = OxmlElement('w:fldChar')
    fldChar.set(qn('w:fldCharType'), 'begin')
    run._r.append(fldChar)
    instrText = OxmlElement('w:instrText')
    instrText.set(qn('xml:space'), 'preserve')
    instrText.text = 'PAGE'
    run._r.append(instrText)
    fldChar = OxmlElement('w:fldChar')
    fldChar.set(qn('w:fldCharType'), 'end')
    run._r.append(fldChar)

    # O usu√°rio precisar√° manualmente ir em "Inserir" > "N√∫mero de P√°gina" > "Formatar N√∫meros de P√°gina"
    # e definir o "Iniciar em" para a p√°gina correta ap√≥s os pr√©-textuais.


# --- FUN√á√ÉO PRINCIPAL DE DIAGRAMA√á√ÉO E REVIS√ÉO (Com Checkpointing) ---

def processar_manuscrito(uploaded_file, format_data: Dict, style_data: Dict, incluir_elementos_abnt: bool, foco_revisao: str, status_container, time_rate_s: float, genero_detectado: str, tonalidade_detectada: str):

    global is_api_ready
    status_container.empty()

    # Cria um novo documento para o resultado
    documento_revisado = Document()

    # 1. Configura√ß√£o de Layout e Estilo
    section = documento_revisado.sections[0]
    section.page_width = Inches(format_data['width_in'])
    section.page_height = Inches(format_data['height_in'])
    # Margens recomendadas para KDP (ex: 1.0" interna, 0.6" externa, 0.8" superior/inferior)
    section.left_margin = Inches(1.0) # Margem interna
    section.right_margin = Inches(0.6) # Margem externa
    section.top_margin = Inches(0.8)
    section.bottom_margin = Inches(0.8)

    # Configurar estilos customizados
    set_normal_style(documento_revisado, style_data)
    set_heading1_style(documento_revisado, style_data)
    set_quote_style(documento_revisado, style_data)

    # Ler o arquivo DOCX original (BytesIO)
    original_doc_bytes = BytesIO(uploaded_file.getvalue())
    documento_original = Document(original_doc_bytes)

    # --- 2. Gera√ß√£o dos Elementos Pr√©-textuais (Fase 1) ---
    uploaded_file.seek(0)
    # Lendo o arquivo como bytes e decodificando para obter uma amostra
    manuscript_sample = uploaded_file.getvalue().decode('utf-8', errors='ignore')[:5000]

    with status_container:
        st.subheader("Fase 1/3: Gera√ß√£o de Elementos Pr√©-textuais")

    # Chamada para gerar elementos pr√©-textuais
    pre_text_content = ""
    if is_api_ready:
        pre_text_content, duration = run_fast_process_with_timer(
            "Gera√ß√£o de Copyright, Dedicat√≥ria, Agradecimentos e Bio do Autor (IA)",
            gerar_elementos_pre_textuais,
            st.session_state['book_title'],
            st.session_state['book_author'],
            2025, # Ano fixo para copyright
            genero_detectado,
            tonalidade_detectada,
            manuscript_sample
        )
    else:
        pre_text_content = """
        ### 1. P√°gina de Copyright e Cr√©ditos
        [Placeholder de Copyright e Cr√©ditos. Conecte a API para gerar conte√∫do profissional.]
        ### 2. P√°gina 'Dedicat√≥ria'
        [Placeholder de Dedicat√≥ria.]
        ### 3. P√°gina 'Agradecimentos'
        [Placeholder de Agradecimentos.]
        ### 4. P√°gina 'Sobre o Autor'
        [Placeholder de Bio do Autor.]
        """
        with status_container:
            st.warning("‚ö†Ô∏è Elementos Pr√©-textuais pulados: Conex√£o OpenAI inativa.")

    # Inser√ß√£o de P√°ginas de Abertura no documento
    adicionar_pagina_rosto(documento_revisado, st.session_state['book_title'], st.session_state['book_author'], style_data)

    # Extrair e adicionar os conte√∫dos gerados pela IA
    elements = {
        "P√°gina de Copyright e Cr√©ditos": None,
        "P√°gina 'Dedicat√≥ria'": None,
        "P√°gina 'Agradecimentos'": None,
        "P√°gina 'Sobre o Autor'": None
    }
    # Parsing do output da IA para distribuir nos placeholders
    for key in elements.keys():
        start_marker = f"### {key}"
        end_marker_idx = pre_text_content.find(start_marker)
        if end_marker_idx != -1:
            content_start = end_marker_idx + len(start_marker)
            next_marker_idx = pre_text_content.find("### ", content_start)
            if next_marker_idx != -1:
                elements[key] = pre_text_content[content_start:next_marker_idx].strip()
            else:
                elements[key] = pre_text_content[content_start:].strip()

    adicionar_pagina_generica(documento_revisado, "P√°gina de Cr√©ditos", "Informa√ß√µes de Copyright e ISBN", elements["P√°gina de Copyright e Cr√©ditos"])
    adicionar_pagina_generica(documento_revisado, "Dedicat√≥ria", content_text=elements["P√°gina 'Dedicat√≥ria'"])
    adicionar_pagina_generica(documento_revisado, "Agradecimentos", content_text=elements["P√°gina 'Agradecimentos'"])

    # Adicionar sum√°rio ap√≥s Dedicat√≥ria e Agradecimentos
    adicionar_pagina_generica(documento_revisado, "Sum√°rio")
    adicionar_campo_sumario(documento_revisado) # Insere o campo de sum√°rio atualiz√°vel
    documento_revisado.add_page_break() # Quebra ap√≥s o sum√°rio

    # --- 3. Processamento do Miolo (Fase 2 - Revis√£o Par√°grafo a Par√°grafo com Checkpointing) ---
    paragrafos = documento_original.paragraphs
    # Filtra apenas par√°grafos com conte√∫do significativo para revis√£o IA
    paragrafos_para_revisar = [p for p in paragrafos if len(p.text.strip()) >= 10]

    total_paragrafos_origem = len(paragrafos) # Total de todos os par√°grafos originais (incluindo vazios/curtos)
    total_a_revisar = len(paragrafos_para_revisar) # Total de par√°grafos que a IA realmente processa

    texto_completo = "" # Armazena o texto original completo para relat√≥rios/blurb
    revisados_count = 0

    # Obt√©m a refer√™ncia para o estado de checkpoint
    processed_state_map = st.session_state['processed_state']

    # C√°lculo para determinar quantos j√° foram revisados (do total_a_revisar)
    already_processed_count = len(processed_state_map)


    # L√ìGICA DE TEMPORIZADOR PARA ESTIMATIVA INICIAL E CONTAGEM REGRESSIVA

    # Apenas o que falta revisar (para a estimativa inicial)
    remaining_to_review_initial = total_a_revisar - already_processed_count

    # Estimativa de tempo total (apenas para o que falta!)
    estimated_total_time_s = remaining_to_review_initial * (time_rate_s + 3.0) # Inclui tempo de chamada da API + overhead
    estimated_minutes = int(estimated_total_time_s // 60)
    estimated_seconds = int(estimated_total_time_s % 60)

    time_estimate_message = f"**{already_processed_count}** par√°grafos j√° revisados (Checkpoint). Faltam **{remaining_to_review_initial}** para revisar. **Estimativa:** Cerca de **{estimated_minutes}m {estimated_seconds}s**."

    with status_container:
        st.subheader("Fase 2/3: Revis√£o e Diagrama√ß√£o do Miolo")
        if is_api_ready:
            st.info(time_estimate_message)
        else:
            st.warning("Revis√£o IA Desativada. Apenas diagrama√ß√£o ser√° executada. Carregue um checkpoint ou configure a API.")

        progress_text_template = "‚è≥ **Tempo Restante:** {remaining_time} | Progresso: {percent}% ({done}/{total})"
        initial_percent = int(already_processed_count / total_a_revisar * 100) if total_a_revisar > 0 else 0

        progress_bar = st.progress(initial_percent / 100.0, text=progress_text_template.format(
            percent=initial_percent,
            done=already_processed_count,
            total=total_a_revisar,
            remaining_time=f"{estimated_minutes}m {estimated_seconds}s"
        ))
        start_loop_time = time.time()

    # NOVO: Local para exibir o bot√£o de auto-checkpoint
    auto_checkpoint_placeholder = st.empty()

    # --- NOVO: L√ìGICA DE MARCOS (MILESTONES) PARA CHECKPOINT AUTOM√ÅTICO ---
    milestones_percentage = [25, 50, 75] # Marcos de percentual
    milestones_count = {
        p: math.ceil(total_a_revisar * (p / 100.0))
        for p in milestones_percentage
    }
    milestones_achieved = [] # Mant√©m o controle de quais marcos j√° foram atingidos

    # Pre-popula milestones_achieved se o checkpoint j√° cobre algum marco
    for percentage in milestones_percentage:
        if already_processed_count >= milestones_count[percentage]:
            milestones_achieved.append(percentage)

    # Atualiza a cada X novos par√°grafos revisados (para evitar sobrecarga da UI)
    update_interval = max(1, remaining_to_review_initial // 20)
    newly_reviewed_count = 0
    current_revisados_total = already_processed_count

    for i, paragrafo in enumerate(paragrafos):
        texto_original = paragrafo.text
        texto_completo += texto_original + "\n" # Acumula o texto original para relat√≥rios/blurb

        texto_original_stripped = texto_original.strip()
        is_revisable = len(texto_original_stripped) >= 10

        if is_revisable:
            # --- L√ìGICA DE CHECKPOINTING ---
            if texto_original_stripped in processed_state_map:
                # O par√°grafo foi encontrado no checkpoint: PULA A API
                texto_revisado = processed_state_map[texto_original_stripped]
            elif is_api_ready:
                # O par√°grafo N√ÉO est√° no checkpoint e a API est√° pronta: CHAMA A API
                texto_revisado = revisar_paragrafo(texto_original, time_rate_s, foco_revisao)

                # Armazena o novo resultado no estado para o pr√≥ximo checkpoint
                st.session_state['processed_state'][texto_original_stripped] = texto_revisado
                newly_reviewed_count += 1
                current_revisados_total += 1
            else:
                # O par√°grafo N√ÉO est√° no checkpoint, mas a API est√° indispon√≠vel:
                texto_revisado = texto_original # Mant√©m o original
        else:
            # Par√°grafo n√£o revis√°vel (muito curto ou vazio)
            texto_revisado = texto_original

        # Cria o novo par√°grafo no documento
        novo_paragrafo = documento_revisado.add_paragraph(texto_revisado)

        # L√≥gica de t√≠tulos e quebras (aplica estilos)
        # Otimizado para melhor detec√ß√£o de cap√≠tulos e aplica√ß√£o de Heading 1
        if len(texto_original_stripped) > 0 and (
            texto_original_stripped.lower().startswith("cap√≠tulo") or
            texto_original_stripped.lower().startswith("introdu√ß√£o") or
            texto_original_stripped.lower().startswith("pr√≥logo") or
            texto_original_stripped.lower().startswith("conclus√£o") or
            (len(texto_original_stripped.split()) < 10 and texto_original_stripped.isupper() and len(texto_original_stripped) > 3) # Heur√≠stica simples para t√≠tulos em MAI√öSCULAS
        ):
            # Garante que todo cap√≠tulo comece em uma nova p√°gina
            if i > 0:
                documento_revisado.add_page_break()
            novo_paragrafo.style = 'Heading 1' # Aplica o estilo 'Heading 1'
            # O alinhamento, fonte e tamanho j√° s√£o definidos em set_heading1_style
            documento_revisado.add_paragraph("") # Espa√ßo adicional ap√≥s o t√≠tulo
        elif len(texto_original_stripped) > 50 and (texto_original_stripped.startswith('"') and texto_original_stripped.endswith('"')):
             # Heur√≠stica simples para identificar cita√ß√µes longas.
            novo_paragrafo.style = 'Quote'
        else:
            novo_paragrafo.style = 'Normal'

        # --- L√ìGICA DE ATUALIZA√á√ÉO DO PROGRESSO E CHECKPOINT AUTOM√ÅTICO ---
        if total_a_revisar > 0 and is_api_ready: # Apenas se h√° algo para revisar e a API est√° ativa
            # Checa se o Marco Autom√°tico foi atingido
            for percentage in milestones_percentage:
                target_count = milestones_count[percentage]

                # Checa se cruzou o marco E se ainda n√£o foi salvo NESTA SESS√ÉO DE LOOP
                if current_revisados_total >= target_count and percentage not in milestones_achieved:
                    st.balloons() # Celebra√ß√£o visual
                    milestones_achieved.append(percentage) # 1. Marca o marco como atingido

                    # 2. Gera o JSON e salva na sess√£o (para download)
                    # Salvamos o st.session_state completo para um checkpoint mais robusto
                    full_project_state = {k: v for k, v in st.session_state.items() if k != 'uploaded_file'} # Evita serializar o arquivo
                    checkpoint_data = json.dumps(full_project_state, indent=4, ensure_ascii=False)
                    checkpoint_bytes = checkpoint_data.encode('utf-8')

                    # 3. Exibe o bot√£o de download no placeholder din√¢mico
                    with auto_checkpoint_placeholder.container():
                        st.subheader(f"‚≠ê Checkpoint Autom√°tico Atingido ({percentage}%)! ‚≠ê")
                        st.download_button(
                            label=f"üíæ BAIXAR AGORA - Progresso {percentage}%",
                            data=checkpoint_bytes,
                            file_name=f"{st.session_state['book_title']}_AUTO_CHECKPOINT_{percentage}p_{int(time.time())}.json",
                            mime="application/json",
                            key=f'auto_dl_button_{percentage}_{current_revisados_total}' # Key √∫nica
                        )
                        st.info("Clique no bot√£o acima para salvar seu progresso. A revis√£o continua...")
                    break # Atingiu um marco, pode sair do loop de milestones

            # Atualiza a barra de progresso em intervalos gerenci√°veis (se algo novo foi revisado)
            if newly_reviewed_count > 0 and (newly_reviewed_count % update_interval == 0 or current_revisados_total == total_a_revisar):

                percent_complete = int(current_revisados_total / total_a_revisar * 100)
                elapsed_time = time.time() - start_loop_time

                remaining_time_str = "Calculando..."
                if current_revisados_total > already_processed_count: # S√≥ calcula se houve progresso real nesta rodada
                    avg_time_per_new_item = elapsed_time / (current_revisados_total - already_processed_count)
                    remaining_time_s = (total_a_revisar - current_revisados_total) * avg_time_per_new_item
                    remaining_minutes = int(remaining_time_s // 60)
                    remaining_seconds = int(remaining_time_s % 60)
                    remaining_time_str = f"{remaining_minutes}m {remaining_seconds}s"

                progress_bar.progress(
                    percent_complete / 100.0,
                    text=progress_text_template.format(
                        percent=percent_complete,
                        done=current_revisados_total,
                        total=total_a_revisar,
                        remaining_time=remaining_time_str
                    )
                )

    # Ap√≥s o loop
    end_loop_time = time.time()
    total_loop_duration = round(end_loop_time - start_loop_time, 1)

    with status_container:
        progress_bar.empty()
        st.success(f"Fase 2/3 conclu√≠da: Miolo processado em **{total_loop_duration}s**! üéâ Total de par√°grafos revisados pela IA nesta rodada: **{newly_reviewed_count}**.")

    # Limpa o placeholder no final
    auto_checkpoint_placeholder.empty()

    # --- 4. Inser√ß√£o de P√°ginas P√≥s-Textuais ---
    documento_revisado.add_page_break()
    about_author_text_full = elements["P√°gina 'Sobre o Autor'"]
    adicionar_pagina_generica(documento_revisado, "Sobre o Autor", "Sua biografia gerada pela IA", about_author_text_full)

    if incluir_elementos_abnt:
        adicionar_pagina_generica(documento_revisado, "Ap√™ndice A", "T√≠tulo do Ap√™ndice (Exemplo ABNT)")
        adicionar_pagina_generica(documento_revisado, "Anexo I", "T√≠tulo do Anexo (Exemplo ABNT)")

    # Configurar cabe√ßalhos e rodap√©s com n√∫meros de p√°gina (pode exigir ajuste manual no Word)
    # Ex: a partir da p√°gina 7, se os pr√©-textuais forem 6 p√°ginas
    configurar_cabecalho_rodape(documento_revisado, st.session_state['book_title'], st.session_state['book_author'])


    # --- 5. Gera√ß√£o do Blurb de Marketing (Fase 3) ---
    with status_container:
        st.subheader("Fase 3/3: Gera√ß√£o de Elementos de Marketing")

    blurb_gerado = st.session_state.get('blurb_ia_original', "") # Pega o blurb se j√° foi gerado na sess√£o

    if is_api_ready and not blurb_gerado: # Gera s√≥ se a API est√° pronta e ainda n√£o foi gerado
        blurb_gerado, duration = run_fast_process_with_timer(
            "Gera√ß√£o do Blurb de Marketing (Contracapa)",
            gerar_conteudo_marketing,
            st.session_state['book_title'],
            st.session_state['book_author'],
            texto_completo # Passa o texto completo (mesmo que original se IA inativa)
        )
        st.session_state['blurb_ia_original'] = blurb_gerado # Salva o gerado pela IA
    elif not is_api_ready and not blurb_gerado:
        blurb_gerado = "[Blurb n√£o gerado. Conecte a API para um texto de vendas profissional.]"
        with status_container:
            st.warning("‚ö†Ô∏è Blurb de Marketing pulado: Conex√£o OpenAI inativa.")

    # O blurb que o usu√°rio pode editar estar√° em st.session_state['blurb']
    # O blurb que a IA gerou primeiro est√° em st.session_state['blurb_ia_original']
    # Se 'blurb' n√£o foi editado, inicializamos com 'blurb_ia_original'
    if 'blurb' not in st.session_state or st.session_state['blurb'] == st.session_state.get('initial_blurb_placeholder', ""):
        st.session_state['blurb'] = blurb_gerado
        st.session_state['initial_blurb_placeholder'] = blurb_gerado # Para controle de edi√ß√£o

    return documento_revisado, texto_completo, st.session_state['blurb']


# --- INICIALIZA√á√ÉO DE ESTADO (Com processed_state) ---
# Usamos um defaultdict ou similar para valores padr√£o se o estado n√£o existir
def init_session_state():
    if 'book_title' not in st.session_state:
        st.session_state['book_title'] = "O √öltimo C√≥digo de Honra"
    if 'book_author' not in st.session_state:
        st.session_state['book_author'] = "Carlos Honorato"
    if 'page_count' not in st.session_state:
        st.session_state['page_count'] = 250
    if 'capa_prompt' not in st.session_state:
        st.session_state['capa_prompt'] = "Um portal antigo se abrindo no meio de uma floresta escura, estilo fantasia √©pica e mist√©rio, cores roxo e preto, alta resolu√ß√£o. Detalhes de um pergaminho antigo e runas m√≠sticas."
    if 'blurb' not in st.session_state:
        st.session_state['blurb'] = "A IA gerar√° o Blurb (Contracapa) aqui. Edite antes de gerar a capa completa!"
    if 'blurb_ia_original' not in st.session_state: # Armazena o blurb gerado pela IA, antes de qualquer edi√ß√£o do usu√°rio
        st.session_state['blurb_ia_original'] = ""
    if 'generated_image_url' not in st.session_state:
        st.session_state['generated_image_url'] = None
    if 'texto_completo' not in st.session_state:
        st.session_state['texto_completo'] = ""
    if 'documento_revisado' not in st.session_state:
        st.session_state['documento_revisado'] = None
    if 'relatorio_kdp' not in st.session_state:
        st.session_state['relatorio_kdp'] = ""
    if 'relatorio_estrutural' not in st.session_state:
        st.session_state['relatorio_estrutural'] = ""
    if 'metadados_seo' not in st.session_state:
        st.session_state['metadados_seo'] = ""
    if 'format_option' not in st.session_state:
        st.session_state['format_option'] = "Padr√£o A5 (5.83x8.27 in)"
    if 'incluir_elementos_abnt' not in st.session_state:
        st.session_state['incluir_elementos_abnt'] = False
    if 'style_option' not in st.session_state:
        st.session_state['style_option'] = "Romance Cl√°ssico (Garamond)"
    if 'time_rate_s' not in st.session_state:
        st.session_state['time_rate_s'] = 0.2
    if 'processed_state' not in st.session_state: # NOVO: Estado de Checkpoint - Mapeia texto original -> texto revisado
        st.session_state['processed_state'] = {}
    if 'foco_revisao' not in st.session_state:
        st.session_state['foco_revisao'] = "completa"
    if 'genero_detectado' not in st.session_state:
        st.session_state['genero_detectado'] = "N/A"
    if 'tonalidade_detectada' not in st.session_state:
        st.session_state['tonalidade_detectada'] = "N/A"

init_session_state()

# --- C√ÅLCULOS DIN√ÇMICOS ---
format_option_default = "Padr√£o A5 (5.83x8.27 in)"
selected_format_data_calc = KDP_SIZES.get(st.session_state.get('format_option', format_option_default), KDP_SIZES[format_option_default])

espessura_cm = round(st.session_state['page_count'] * selected_format_data_calc['papel_fator'], 2)
# Adiciona 0.6cm de sangria (0.3cm de cada lado)
capa_largura_total_cm = round((selected_format_data_calc['width_cm'] * 2) + espessura_cm + 0.6, 2)
capa_altura_total_cm = round(selected_format_data_calc['height_cm'] + 0.6, 2)
# --- FIM C√ÅLCULOS DIN√ÇMICOS ---

# --- FUN√á√ïES PARA CARREGAR/SALVAR ESTADO COMPLETO DO PROJETO ---
def load_project_state_from_json(uploaded_json):
    """L√™ o arquivo JSON e carrega o estado COMPLETO do projeto para a sess√£o."""
    try:
        bytes_data = uploaded_json.read()
        data = json.loads(bytes_data.decode('utf-8'))

        if isinstance(data, dict):
            # Limpa o estado atual antes de carregar o novo
            for key in list(st.session_state.keys()):
                if key != 'uploaded_file': # N√£o limpa o arquivo carregado, o usu√°rio deve carregar o mesmo DOCX
                     del st.session_state[key]

            # Carrega os dados salvos
            for key, value in data.items():
                st.session_state[key] = value
            st.success(f"Estado do projeto carregado com sucesso! **{len(st.session_state.get('processed_state', {}))}** par√°grafos revisados restaurados.")
            st.rerun() # Recarrega o app para refletir o estado
        else:
            st.error("Formato JSON inv√°lido. O arquivo deve conter um objeto (dicion√°rio) com o estado do projeto.")
    except Exception as e:
        st.error(f"Erro ao ler ou processar o arquivo JSON de projeto: {e}")

# --- FLUXO PRINCIPAL DO APLICATIVO (Tabs) ---

config_tab, miolo_tab, capa_tab, export_tab = st.tabs([
    "1. Configura√ß√£o Inicial",
    "2. Diagrama√ß√£o & Elementos",
    "3. Capa Completa IA",
    "4. An√°lise & Exportar"
])

# --- TAB 1: CONFIGURA√á√ÉO INICIAL (Com Upload de Checkpoint/Projeto) ---

with config_tab:
    st.header("Dados Essenciais para o Projeto")

    col1, col2 = st.columns(2)
    with col1:
        st.session_state['book_title'] = st.text_input("T√≠tulo do Livro", st.session_state['book_title'], key='book_title_input')
        st.session_state['page_count'] = st.number_input("Contagem Aproximada de P√°ginas (Miolo)", min_value=10, value=st.session_state['page_count'], step=10, key='page_count_input')
    with col2:
        st.session_state['book_author'] = st.text_input("Nome do Autor", st.session_state['book_author'], key='book_author_input')

    st.header("Escolha de Formato e Estilo")

    col3, col4, col5 = st.columns(3)
    with col3:
        st.session_state['format_option'] = st.selectbox(
            "Tamanho de Corte Final (KDP/Gr√°fica):",
            options=list(KDP_SIZES.keys()),
            index=list(KDP_SIZES.keys()).index(st.session_state['format_option']),
            key='format_option_select'
        )
        selected_format_data = KDP_SIZES[st.session_state['format_option']]

    with col4:
        default_style_key = "Romance Cl√°ssico (Garamond)"
        current_style_key = st.session_state.get('style_option', default_style_key)

        style_option = st.selectbox(
            "Template de Estilo de Diagrama√ß√£o:",
            options=list(STYLE_TEMPLATES.keys()),
            index=list(STYLE_TEMPLATES.keys()).index(current_style_key),
            key='style_option_select',
        )
        st.session_state['style_option'] = style_option
        selected_style_data = STYLE_TEMPLATES[style_option]

    with col5:
        st.session_state['incluir_elementos_abnt'] = st.checkbox(
            "Incluir Elementos ABNT (Ap√™ndices/Anexos)",
            value=st.session_state['incluir_elementos_abnt'],
            key='incluir_abnt_checkbox',
            help="Adiciona p√°ginas de Ap√™ndice e Anexo no final do documento (formato ABNT)."
        )

    st.subheader("Configura√ß√µes da Revis√£o de IA")
    st.session_state['foco_revisao'] = st.selectbox(
        "Foco da Revis√£o da IA:",
        options=["completa", "gramatica_ortografia", "clareza_concisao", "estilo_fluidez"],
        format_func=lambda x: x.replace('_', ' ').title(),
        key='foco_revisao_select',
        help="Escolha o principal objetivo da revis√£o da IA para os par√°grafos."
    )
    st.session_state['time_rate_s'] = st.slider(
        "Atraso por Par√°grafo (segundos):",
        min_value=0.1,
        max_value=1.5,
        value=st.session_state['time_rate_s'],
        step=0.1,
        help="Controla a velocidade da revis√£o IA para evitar o limite de taxa (Rate Limit) da OpenAI. Use uma taxa mais alta (ex: 0.5s ou mais) para manuscritos muito longos ou para evitar erros de conex√£o."
    )

    st.subheader("Upload do Manuscrito e Gerenciamento do Projeto")
    uploaded_file = st.file_uploader(
        "Carregue o arquivo .docx do seu manuscrito (Ser√° salvo no estado da sess√£o):",
        type=['docx'],
        key='uploaded_file_uploader'
    )
    st.session_state['uploaded_file'] = uploaded_file

    st.markdown("---")
    st.subheader("Carregar/Salvar Progresso do Projeto")

    checkpoint_file = st.file_uploader(
        "‚¨ÜÔ∏è Carregar Estado Completo do Projeto (.json):",
        type=['json'],
        key='project_state_uploader',
        help="Carregue um arquivo JSON salvo anteriormente para restaurar todo o estado do projeto (incluindo progresso da revis√£o, blurb, etc.). **ATEN√á√ÉO:** O arquivo DOCX original (manuscrito) deve ser carregado novamente ap√≥s carregar o estado para continuar o processamento."
    )

    if checkpoint_file is not None:
        load_project_state_from_json(checkpoint_file)

    st.info(f"**Status do Checkpoint da Revis√£o:** **{len(st.session_state['processed_state'])}** par√°grafos revisados em mem√≥ria.")
    st.info(f"**G√™nero Detectado (IA):** {st.session_state['genero_detectado']} | **Tonalidade Detectada (IA):** {st.session_state['tonalidade_detectada']}")
    st.info(f"**C√°lculo da Lombada (Spine):** **{espessura_cm} cm**. **Dimens√£o Total da Capa (com sangria 0.3cm):** **{capa_largura_total_cm} cm x {capa_altura_total_cm} cm**.")


# --- TAB 2: DIAGRAMA√á√ÉO & ELEMENTOS ---

with miolo_tab:
    st.header("Fluxo de Diagrama√ß√£o e Revis√£o com IA")

    uploaded_file = st.session_state.get('uploaded_file')

    if uploaded_file is None:
        st.warning("Por favor, carregue um arquivo .docx na aba **'1. Configura√ß√£o Inicial'** para come√ßar.")
    else:
        status_container = st.container()

        if st.button("‚ñ∂Ô∏è Iniciar An√°lise e Processamento do Miolo (Diagrama√ß√£o e Revis√£o)"):
            if not is_api_ready and len(st.session_state['processed_state']) == 0:
                 st.error("Aten√ß√£o: A revis√£o IA est√° desativada e nenhum Checkpoint foi carregado. Apenas a diagrama√ß√£o b√°sica ser√° realizada. Considere carregar um checkpoint ou configurar a API.")

            with status_container:
                st.info("Processamento iniciado! Acompanhe o progresso abaixo...")

            # Re-obter dados para garantir que s√£o os mais recentes da sess√£o
            selected_format_data = KDP_SIZES[st.session_state['format_option']]
            current_style_key = st.session_state.get('style_option', "Romance Cl√°ssico (Garamond)")
            selected_style_data = STYLE_TEMPLATES[current_style_key]

            # Analisar g√™nero e tonalidade antes de processar o manuscrito
            uploaded_file.seek(0)
            manuscript_sample_for_analysis = uploaded_file.getvalue().decode('utf-8', errors='ignore')[:10000] # Amostra maior
            analise_result, _ = run_fast_process_with_timer(
                "An√°lise de G√™nero e Tonalidade (IA)",
                analisar_genero_e_tonalidade,
                manuscript_sample_for_analysis
            )
            st.session_state['genero_detectado'] = analise_result.get('genero', 'N√£o detectado')
            st.session_state['tonalidade_detectada'] = analise_result.get('tonalidade', 'N√£o detectada')
            st.toast(f"G√™nero: {st.session_state['genero_detectado']}, Tonalidade: {st.session_state['tonalidade_detectada']}", icon="üí°")


            uploaded_file.seek(0) # Resetar ponteiro do arquivo para o in√≠cio para o processamento do miolo
            documento_revisado, texto_completo, blurb_processado = processar_manuscrito(
                uploaded_file,
                selected_format_data,
                selected_style_data,
                st.session_state['incluir_elementos_abnt'],
                st.session_state['foco_revisao'],
                status_container,
                st.session_state['time_rate_s'],
                st.session_state['genero_detectado'],
                st.session_state['tonalidade_detectada']
            )

            st.session_state['documento_revisado'] = documento_revisado
            st.session_state['texto_completo'] = texto_completo
            st.session_state['blurb'] = blurb_processado # O blurb edit√°vel na sess√£o √© atualizado
            # O blurb gerado pela IA √© salvo em 'blurb_ia_original'

            # Limpa relat√≥rios anteriores para for√ßar a regera√ß√£o se necess√°rio
            st.session_state['relatorio_estrutural'] = ""
            st.session_state['relatorio_kdp'] = ""
            st.session_state['metadados_seo'] = ""
            st.session_state['generated_image_url'] = None

            st.toast("Miolo Pronto!", icon="‚úÖ")

        if st.session_state['documento_revisado']:
            current_style_key = st.session_state.get('style_option', "Romance Cl√°ssico (Garamond)")
            selected_style_data = STYLE_TEMPLATES[current_style_key]
            st.success(f"Miolo diagramado no formato **{st.session_state['format_option']}** com o estilo **'{selected_style_data['font_name']}**'.")

            st.subheader("Interven√ß√£o: Blurb da Contracapa")
            st.warning("O Blurb abaixo ser√° usado no design da Capa Completa. **Edite-o** se necess√°rio antes de gerar a capa.")
            st.session_state['blurb'] = st.text_area(
                "Texto de Vendas (Blurb) - EDIT√ÅVEL:",
                st.session_state['blurb'],
                height=300,
                key='blurb_text_area'
            )
            if st.button("üîÑ Resetar Blurb para Sugest√£o da IA"):
                st.session_state['blurb'] = st.session_state.get('blurb_ia_original', "")
                st.toast("Blurb resetado para a sugest√£o original da IA!", icon="‚úÖ")
                st.rerun()


# --- TAB 3: CAPA COMPLETA IA ---
with capa_tab:
    st.header("Cria√ß√£o da Capa Completa (Frente, Lombada e Verso)")

    if st.session_state['texto_completo'] == "" or st.session_state['blurb'] == "":
        st.warning("Por favor, execute o processamento do Miolo (Aba 2) para garantir que o Blurb e o T√≠tulo estejam prontos para a gera√ß√£o da capa.")
    else:

        st.subheader("Passo 1: Defina o Conte√∫do Visual e de Texto")

        st.info(f"O Blurb atual (Contracapa) √©: **{st.session_state['blurb'][:150]}...**")
        st.text_input("T√≠tulo para Capa", st.session_state['book_title'], disabled=True, key='capa_titulo_display')
        st.text_input("Autor para Capa", st.session_state['book_author'], disabled=True, key='capa_autor_display')

        st.session_state['capa_prompt'] = st.text_area(
            "Descri√ß√£o VISUAL da Capa (Estilo DALL-E 3):",
            st.session_state['capa_prompt'],
            height=200,
            key='capa_prompt_area',
            help="Descreva a arte que deve aparecer, o estilo (ex: √≥leo, arte digital, surrealismo) e as cores predominantes. Seja o mais espec√≠fico poss√≠vel para guiar a IA, lembrando que a IA tentar√° incluir T√çTULO, AUTOR e BLURB no design."
        )

        st.subheader("Passo 2: Gera√ß√£o")
        st.warning(f"Aten√ß√£o: A Capa Completa ser√° gerada com as dimens√µes de **{capa_largura_total_cm}cm x {capa_altura_total_cm}cm** (calculado com base nas p√°ginas). A precis√£o do texto gerado na imagem pela IA pode variar e pode exigir edi√ß√£o externa.")

        if st.button("üé® Gerar Capa COMPLETA com IA (DALL-E 3)"):
            if not is_api_ready:
                st.error("Chaves OpenAI n√£o configuradas. N√£o √© poss√≠vel gerar a imagem. Verifique a aba '1. Configura√ß√£o Inicial'.")
            else:
                image_output, duration = run_fast_process_with_timer(
                    "Gera√ß√£o do Design de Capa Completa (DALL-E 3)",
                    gerar_capa_ia_completa,
                    st.session_state['capa_prompt'],
                    st.session_state['blurb'],
                    st.session_state['book_author'],
                    st.session_state['book_title'],
                    capa_largura_total_cm,
                    capa_altura_total_cm,
                    espessura_cm
                )

                if "http" in image_output:
                    st.session_state['generated_image_url'] = image_output
                    st.toast("Capa Gerada! Veja a pr√©-visualiza√ß√£o.", icon="‚úÖ")
                else:
                    st.error(image_output)

        if st.session_state['generated_image_url']:
            st.subheader("Pr√©-visualiza√ß√£o da Capa Gerada")
            st.image(st.session_state['generated_image_url'], caption="Capa Completa (Frente, Lombada e Verso)", use_column_width=True)
            st.info("Para edi√ß√µes finas de texto na capa ou adi√ß√£o de elementos como ISBN e foto do autor, ser√° necess√°rio usar um software de edi√ß√£o de imagem (ex: Photoshop, GIMP).")


# --- TAB 4: AN√ÅLISE & EXPORTAR (Com Download de Checkpoint) ---

with export_tab:
    st.header("Relat√≥rios Finais e Exporta√ß√£o")

    if not st.session_state.get('documento_revisado'):
        st.warning("Por favor, execute o processamento do Miolo (Aba 2) antes de gerar relat√≥rios ou exportar.")
    else:

        # --- Relat√≥rios ---
        st.subheader("1. Relat√≥rios de An√°lise")

        col_rel1, col_rel2, col_rel3 = st.columns(3)
        with col_rel1:
            if is_api_ready and st.button("Gerar/Atualizar Relat√≥rio Estrutural"):
                relatorio, duration = run_fast_process_with_timer(
                    "Gera√ß√£o do Relat√≥rio Estrutural",
                    gerar_relatorio_estrutural,
                    st.session_state['book_title'],
                    st.session_state['book_author'],
                    st.session_state['texto_completo']
                )
                st.session_state['relatorio_estrutural'] = relatorio

        with col_rel2:
            if is_api_ready and st.button("Gerar/Atualizar Relat√≥rio T√©cnico KDP"):
                relatorio, duration = run_fast_process_with_timer(
                    "Gera√ß√£o do Relat√≥rio T√©cnico KDP",
                    gerar_relatorio_conformidade_kdp,
                    st.session_state['book_title'],
                    st.session_state['book_author'],
                    st.session_state['page_count'],
                    selected_format_data_calc,
                    espessura_cm,
                    capa_largura_total_cm,
                    capa_altura_total_cm
                )
                st.session_state['relatorio_kdp'] = relatorio

        with col_rel3:
            if is_api_ready and st.button("Gerar/Atualizar Metadados e SEO"):
                metadados, duration = run_fast_process_with_timer(
                    "Gera√ß√£o de Metadados e SEO",
                    gerar_metadados_seo,
                    st.session_state['book_title'],
                    st.session_state['book_author'],
                    st.session_state['genero_detectado'],
                    st.session_state['blurb'],
                    st.session_state['texto_completo']
                )
                st.session_state['metadados_seo'] = metadados


        if st.session_state.get('relatorio_estrutural'):
            st.markdown("### Relat√≥rio Estrutural:")
            st.markdown(st.session_state['relatorio_estrutural'])

        if st.session_state.get('relatorio_kdp'):
            st.markdown("### Relat√≥rio T√©cnico KDP:")
            st.markdown(st.session_state['relatorio_kdp'])

        if st.session_state.get('metadados_seo'):
            st.markdown("### Metadados e SEO Sugeridos:")
            st.markdown(st.session_state['metadados_seo'])

        st.markdown("---")
        # --- Exporta√ß√£o de Arquivos ---
        st.subheader("2. Exporta√ß√£o de Arquivos Finais")

        def to_docx_bytes(document):
            file_stream = BytesIO()
            document.save(file_stream)
            file_stream.seek(0)
            return file_stream.read()

        docx_bytes = to_docx_bytes(st.session_state['documento_revisado'])

        col_dl1, col_dl2, col_dl3, col_dl4 = st.columns(4)

        with col_dl1:
            st.download_button(
                label="‚¨áÔ∏è Baixar Miolo DOCX",
                data=docx_bytes,
                file_name=f"{st.session_state['book_title']}_Miolo_Diagramado.docx",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                help="Baixe o manuscrito revisado e diagramado no formato DOCX. Pode ser necess√°rio abrir e atualizar o sum√°rio no Word."
            )

        if st.session_state['generated_image_url']:
            try:
                # O requests.get √© necess√°rio para baixar a URL externa da imagem gerada pelo DALL-E
                image_response = requests.get(st.session_state['generated_image_url'])
                image_bytes = BytesIO(image_response.content).read()

                with col_dl2:
                    st.download_button(
                        label="‚¨áÔ∏è Baixar Arte da Capa Completa (JPG)",
                        data=image_bytes,
                        file_name=f"{st.session_state['book_title']}_Capa_Completa.jpg",
                        mime="image/jpeg",
                        help="Baixe a imagem da capa gerada pela IA. Pode precisar de edi√ß√£o para precis√£o de texto, ISBN e perfil de cores (CMYK)."
                    )
            except Exception:
                with col_dl2:
                    st.warning("Capa gerada, mas houve erro no download da imagem. Tente novamente ou verifique a URL.")
        else:
            with col_dl2:
                 st.warning("Capa indispon√≠vel para download.")

        # --- L√ìGICA DE DOWNLOAD MANUAL DO ESTADO DO PROJETO ---
        with col_dl3:
            # Salvamos o st.session_state completo para um checkpoint mais robusto
            full_project_state_to_save = {k: v for k, v in st.session_state.items() if k != 'uploaded_file'} # Evita serializar o arquivo
            processed_json = json.dumps(full_project_state_to_save, indent=4, ensure_ascii=False)
            processed_bytes = processed_json.encode('utf-8')

            st.download_button(
                label="üíæ Baixar Estado do Projeto (JSON)",
                data=processed_bytes,
                file_name=f"{st.session_state['book_title']}_PROJETO_ESTADO_{int(time.time())}.json",
                mime="application/json",
                help=f"Baixe este arquivo para salvar o estado completo do projeto e continuar de onde parou mais tarde. Voc√™ precisar√° do DOCX original para recarregar."
            )

        with col_dl4:
            st.subheader("Exporta√ß√µes Avan√ßadas (Futuro)")
            st.info("Para exportar para EPUB ou PDF para impress√£o, seriam necess√°rias bibliotecas ou integra√ß√µes mais complexas que n√£o cabem neste √∫nico arquivo Streamlit. Isso seria uma √≥tima expans√£o para o seu projeto no GitHub!")
            st.download_button(
                label="‚ùå Gerar EPUB (Em Desenvolvimento)",
                data="Em breve!",
                file_name=f"{st.session_state['book_title']}.epub",
                mime="application/epub+zip",
                disabled=True
            )
            st.download_button(
                label="‚ùå Gerar PDF p/ Impress√£o (Em Desenvolvimento)",
                data="Em breve!",
                file_name=f"{st.session_state['book_title']}_print.pdf",
                mime="application/pdf",
                disabled=True
            )
